name: scale down agent pool

on:
  # runs after the other CI/CD pipelines to scale down the runners when no runs are running.
  workflow_run:
    workflows: 
      - CICD container app infra
      - CICD runner container
    types:
      - completed

  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 1,13 * * *'
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  

permissions:
  id-token: write
  contents: read

jobs:
# scale down to zero runners if no tasks are running or queued
  scaleagents:
    needs: [parsecontext]
    environment: 
      name: production
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      - name: 'get acr data'
        id: getinfraparams
        run: |
          parse_tf_param_to_env_var() {
            # read tfvar files from infra folder and look for a match, the last match is set as env value
            # $1 = name of parameter to match
            # $2 = the env value in subsequent steps
            param_value=""
            for f in $( find ./infra -name *.auto.tfvars ); do 
              for match in $(grep "^$1 " $f); do
                if [[ "$match" =~ \"(.*)\" ]] ; then
                    param_value="${BASH_REMATCH[1]}"
                fi
              done
            done
            echo "$2=$param_value" >> $GITHUB_ENV
          }
          parse_tf_param_to_env_var 'registry_name'                         'RUNNER_REGISTRY_NAME'
          parse_tf_param_to_env_var 'registry_agent_pool_name'              'RUNNER_REGISTRY_AGENT_POOL_NAME'
      - name: scale-down agent pool
        run: |
          acr_task_arguments=()
          acr_task_arguments+=(--output)
          acr_task_arguments+=('json')
          if [ "$ACTIONS_STEP_DEBUG" = 'true' ]; then
            acr_task_arguments+=(--debug)
          fi

          # test if ok to scale agent pool
          echo "::debug:: check if agent pool is ready to scale"
          agent_provisioning_state=$(
            az acr agentpool show \
            -r $RUNNER_REGISTRY_NAME \
            -n $RUNNER_REGISTRY_AGENT_POOL_NAME \
            "${acr_task_arguments[@]}" |
            jq .provisioningState --raw-output
          )
          if [ "$agent_provisioning_state" != 'Succeeded' ] ; then
            notice="Agentpool not in stable provisioningstate 'Succeeded' but in state '${agent_provisioning_state}. Skipping Autoscaling"
            echo "$notice"
            echo "::notice:: ${notice}"
            exit 0
          fi
          
          echo "::debug:: agent pool stable in state $agent_provisioning_state"
          echo "::debug:: getting unfinished run list"

          unfinished_runs=$(
             az acr task list-runs \
             -r $RUNNER_REGISTRY_NAME \
             --query "[?(status == 'Queued' || status == 'Started' || status == 'Running')]" \
             "${acr_task_arguments[@]}" | 
             jq .[].name --raw-output
          )

          if [ "${#unfinished_runs[@]}" == '0' ] ; then
            notice="no more running build tasks, scaling down run"
            echo "$notice"
            echo "::notice::$notice"
            echo "::debug:: scaling down agent pool $RUNNER_REGISTRY_AGENT_POOL_NAME for registry $RUNNER_REGISTRY_NAME to 0 instances"
            az acr agentpool update \
              --registry $RUNNER_REGISTRY_NAME \
              --name $RUNNER_REGISTRY_AGENT_POOL_NAME \
              --count '0'
          else
            run_array_string=$(IFS=, ; echo "${unfinished_runs[*]}")
            echo "::warning::found ${#unfinished_runs[@]} unfinished runs on acr $RUNNER_REGISTRY_NAME, Scale down cancelled. Runs in unfinshed state <Queued|Started|Running> : [$run_array_string]"
          fi


