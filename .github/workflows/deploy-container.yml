name: Deploy runner container

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
    paths:
      - 'dockerfiles/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'dockerfiles/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
      id-token: write
      contents: read

jobs:
  parsecontext:
    runs-on: ubuntu-latest
    name: parse github context for environment
    steps:
      - name: parse environment to outputs
        id: getenv
        run: |
          if   [ "${{ github.ref }}" = 'refs/heads/main' ] && [ "${{ github.event_name }}" = 'push' ]; then
            echo "::set-output name=env_name::production"
            echo "env_name prodcution from commit on main"
          elif [ "${{ github.ref }}" = 'refs/heads/main' ] && [ "${{ github.event_name }}" = 'workflow_dispatch' ]; then
            echo "::set-output name=env_name::production"
            echo "env_name prodcution from workflow_dispatch on main"
          else
            echo "::set-output name=env_name::acceptance"
            echo "env_name acceptance"
          fi
    outputs:
      env_name: ${{ steps.getenv.outputs.env_name }}
  build-linux-runner:
    name: build github runner linux
    needs: [parsecontext]
    environment: 
      name: ${{ needs.parsecontext.outputs.env_name }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      - name: 'get acr data'
        id: getinfraparams
        run: |
          parse_tf_param_to_env_var() {
            # read tfvar files from infra folder and look for a match, the last match is set as env value
            # $1 = name of parameter to match
            # $2 = the env value in subsequent steps
            param_value=""
            for f in $( find ./infra -name *.auto.tfvars ); do 
              for match in $(grep "^$1 " $f); do
                if [[ "$match" =~ \"(.*)\" ]] ; then
                    param_value="${BASH_REMATCH[1]}"
                fi
              done
            done
            echo "$2=$param_value" >> $GITHUB_ENV
          }
          parse_tf_param_to_env_var 'registry_name'                         'RUNNER_REGISTRY_NAME'
          parse_tf_param_to_env_var 'registry_build_task_name'              'RUNNER_BUILD_TASK_NAME'
          parse_tf_param_to_env_var 'registry_agent_pool_name'              'RUNNER_REGISTRY_AGENT_POOL_NAME'
          parse_tf_param_to_env_var 'container_build_image_name'            'RUNNER_BUILD_IMAGE_NAME'
          parse_tf_param_to_env_var 'container_build_linux_context'         'RUNNER_BUILD_CONTEXT'
          parse_tf_param_to_env_var 'container_build_linux_dockerfile_path' 'RUNNER_BUILD_CONTEXT_DOCKERFILE'
          parse_tf_param_to_env_var 'container_build_linux_image_tag'       'RUNNER_BUILD_IMAGE_TAG_LINUX'
      
      # scale up to the amount of runs scheduled
      - name: 'scale down agent-pool'
        id: scaleagentsup
        run: |
          acr_task_arguments=()
          if [ "$ACTIONS_STEP_DEBUG" = 'true' ]; then
            acr_task_arguments+=(--debug)
          fi

          required_agents=$(
             az acr task list-runs -r $RUNNER_REGISTRY_NAME |
             jq --arg flag "$RUNNER_REGISTRY_AGENT_POOL_NAME" -c '
                [
                  .[] | 
                  select(.agentPoolName == $flag) 
                ] | 
                length |
                . + 1' --raw-output
          )
          
          az acr agentpool update \
              --registry $RUNNER_REGISTRY_NAME \
              --name $RUNNER_REGISTRY_AGENT_POOL_NAME \
              --count $required_agents "${acr_task_arguments[@]}"

      - name: 'compile tag list'
        id: buildcontainertags
        run: |
          touch .tags 
          echo "${RUNNER_BUILD_IMAGE_NAME}:${RUNNER_BUILD_IMAGE_TAG_LINUX}-{{.Run.ID}}" >> .tags
          echo "${RUNNER_BUILD_IMAGE_NAME}:${RUNNER_BUILD_IMAGE_TAG_LINUX}-ghaction-${GITHUB_RUN_ID}" >> .tags
          
          # if from main branch add latest and linux tag
          if [ $GITHUB_REF == 'refs/heads/main' ] && [ $GITHUB_REF_NAME == 'push' ]; then
            echo "${RUNNER_BUILD_IMAGE_NAME}:${RUNNER_BUILD_IMAGE_TAG_LINUX}" >> .tags
            echo "${RUNNER_BUILD_IMAGE_NAME}:latest" >> .tags
          fi
          for tag in $(cat .tags); do
              echo "::debug::container tag -> '$tag'"
          done 
      - name: 'create acr task'
        id: createacrtask
        run: |
          acr_task_arguments=()
          for tag in $(cat .tags); do
            acr_task_arguments+=(-t)
            acr_task_arguments+=("$tag")
          done

          if [ "$ACTIONS_STEP_DEBUG" = 'true' ]; then
            acr_task_arguments+=(--debug)
          fi
          echo "::debug::creating acr task '${RUNNER_BUILD_TASK_NAME}-ghaction-run-${GITHUB_RUN_ID}'"
          
          az acr task create \
            -r $RUNNER_REGISTRY_NAME \
            -n "${RUNNER_BUILD_TASK_NAME}-ghaction-run-${GITHUB_RUN_ID}" \
            -c "${RUNNER_BUILD_CONTEXT}" \
            -f "${RUNNER_BUILD_CONTEXT_DOCKERFILE}" \
            --agent-pool "${RUNNER_REGISTRY_AGENT_POOL_NAME}" \
            --git-access-token "${{ secrets.GITHUB_TOKEN }}" \
            --commit-trigger-enabled false \
            --base-image-trigger-enabled false \
            --platform linux "${acr_task_arguments[@]}"

      - name: 'run acr task'
        id: runacrtask
        run: | 
          acr_task_arguments=()
          if [ "$ACTIONS_STEP_DEBUG" = 'true' ]; then
            acr_task_arguments+=(--debug)
          fi

          az acr task run -r $RUNNER_REGISTRY_NAME -n "${RUNNER_BUILD_TASK_NAME}-ghaction-run-${GITHUB_RUN_ID}" "${acr_task_arguments[@]}"
      
      - name: 'remove acr task'
        id: removetask
        if: "${{ steps.createacrtask.conclusion == 'success'}}"
        continue-on-error: true
        run: |
          acr_task_arguments=()
          if [ "$ACTIONS_STEP_DEBUG" = 'true' ]; then
            acr_task_arguments+=(--debug)
          fi
          az acr task delete -r $RUNNER_REGISTRY_NAME -n "${RUNNER_BUILD_TASK_NAME}-ghaction-run-${GITHUB_RUN_ID}" -y "${acr_task_arguments[@]}"
      
      # scale down to zero runners if no tasks are running or queued
      - name: 'scale down agent-pool'
        id: scaleagentsdown
        if: "${{ steps.scaleagentsup.conclusion == 'success'}}"
        run: |
          
          unfinished_runs=$(
             az acr task list-runs -r $RUNNER_REGISTRY_NAME |
             jq -c '[.[] | {name: .name, status: .status} | select( .status == "Running" or .status == "Queued" or .status == "Started")] | length' --raw-output
          )
          if [ "$unfinished_runs" == '0' ] ; then
            echo "::notice::no more running build tasks, scaling down run"
            az acr agentpool update \
              --registry $RUNNER_REGISTRY_NAME \
              --name $RUNNER_REGISTRY_AGENT_POOL_NAME \
              --count '0'
          else
            echo "::warning::found $unfinished_runs unfinished runs on acr $RUNNER_REGISTRY_NAME. Scale down cancelled"
          fi

          