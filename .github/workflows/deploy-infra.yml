name: Deploy acr infra

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
    paths:
      - 'infra/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'infra/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
      id-token: write
      contents: read

jobs:
  # only deploy to production when running on main from merge, commit or manual trigger.
  # otherwise deploy to acceptance
  parsecontext:
    runs-on: ubuntu-latest
    name: parse github context for environment
    steps:
      - name: parse environment to outputs
        id: getenv
        run: |
          if   [ "${{ github.ref }}" = 'refs/heads/main' ] && [ "${{ github.event_name }}" = 'push' ]; then
            echo "::set-output name=env_name::production"
            echo "env_name prodcution from commit on main"
          elif [ "${{ github.ref }}" = 'refs/heads/main' ] && [ "${{ github.event_name }}" = 'workflow_dispatch' ]; then
            echo "::set-output name=env_name::production"
            echo "env_name prodcution from workflow_dispatch on main"
          else
            echo "::set-output name=env_name::acceptance"
            echo "env_name acceptance"
          fi
    outputs:
      env_name: ${{ steps.getenv.outputs.env_name }}

  # test and deploy infra the the appropriate environment
  deploy:
    needs: [parsecontext]
    environment: 
      name: ${{ needs.parsecontext.outputs.env_name }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./infra
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
    steps:
    - uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.2.8
    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -input=false
      env:
        TF_VAR_container_build_context_access_token: ${{ secrets.GITHUB_TOKEN }}
        TF_VAR_runner_organization_name: ${{ secrets.RUNNER_ORGANIZATION }}
        TF_VAR_runner_registration_token: ${{ secrets.RUNNER_TOKEN }}

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: terraform apply -auto-approve -input=false
      env:
        TF_VAR_container_build_context_access_token: ${{ secrets.GITHUB_TOKEN }}
        TF_VAR_runner_organization_name: ${{ secrets.RUNNER_ORGANIZATION }}
        TF_VAR_runner_registration_token: ${{ secrets.RUNNER_TOKEN }}
  
  # scale down to zero runners if no tasks are running or queued
  scale-down:
    needs: [parsecontext, deploy]
    environment: 
      name: ${{ needs.parsecontext.outputs.env_name }}
    name: scale-down agent pool
    steps:
      - uses: actions/checkout@v2
      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      - name: 'get acr data'
        id: getinfraparams
        run: |
          parse_tf_param_to_env_var() {
            # read tfvar files from infra folder and look for a match, the last match is set as env value
            # $1 = name of parameter to match
            # $2 = the env value in subsequent steps
            param_value=""
            for f in $( find ./infra -name *.auto.tfvars ); do 
              for match in $(grep "^$1 " $f); do
                if [[ "$match" =~ \"(.*)\" ]] ; then
                    param_value="${BASH_REMATCH[1]}"
                fi
              done
            done
            echo "$2=$param_value" >> $GITHUB_ENV
          }
          parse_tf_param_to_env_var 'registry_name'                         'RUNNER_REGISTRY_NAME'
          parse_tf_param_to_env_var 'registry_agent_pool_name'              'RUNNER_REGISTRY_AGENT_POOL_NAME'
      - name: 'scale agent-pool'
        id: scaleagentsdown
        run: |
          unfinished_runs=$(
             az acr task list-runs -r $RUNNER_REGISTRY_NAME |
             jq -c '[.[] | {name: .name, status: .status} | select( .status == "Running" or .status == "Queued" or .status == "Started")] | length'
          )
          if [$unfinished_runs == 0] ; then
            echo "::notice::no more running build tasks, scaling down run"
            az acr agentpool update \
              --registry $RUNNER_REGISTRY_NAME \
              --name $RUNNER_REGISTRY_AGENT_POOL_NAME \
              --count 0
          else
            echo "::warning::found $unfinished_runs unfinished runs on acr $RUNNER_REGISTRY_NAME. Scale down cancelled"
          fi
    
